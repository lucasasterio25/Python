# The script MUST contain a function named azureml_main
# which is the entry point for this module.

# imports up here can be used to 
from statsmodels.tsa.arima_model import ARIMA
import numpy
import pandas as pd
# The entry point function can contain up to two input arguments:
#   Param<dataframe1>: a pandas.DataFrame
#   Param<dataframe2>: a pandas.DataFrame

def azureml_main(dataframe1 = None, dataframe2 = None):

    # Execution logic goes here
    print('Input pandas.DataFrame #1:\r\n\r\n{0}'.format(dataframe1))
    
    df = create_forecast(dataframe1)
    # If a zip file is connected to the third input port is connected,
    # it is unzipped under ".\Script Bundle". This directory is added
    # to sys.path. Therefore, if your zip file contains a Python file
    # mymodule.py you can import it using:
    # import mymodule
    
    # Return value must be of a sequence of pandas.DataFrame
    return df,

# create a differenced series
def difference(dataset, interval=1):
    diff = list()
    for i in range(interval, len(dataset)):
        value = dataset[i] - dataset[i - interval]
        diff.append(value)
    return numpy.array(diff)

# invert differenced value
def inverse_difference(history, yhat, interval=1):
    return yhat + history[-interval]

def create_forecast(series):
    series = series.sort_values('DAT_INDICADOR')
    series = series.set_index('DAT_INDICADOR')
    series = series.astype('float32')
    
    # seasonal difference
    X = series.values
    days_in_year = 365
    differenced = difference(X, days_in_year)
    # fit model
    model = ARIMA(differenced, order=(7,0,1))
    model_fit = model.fit(disp=0)
    # multi-step out-of-sample forecast
    start_index = len(differenced)
    end_index = start_index + 7
    forecast = model_fit.predict(start=start_index, end=end_index)
    # invert the differenced forecast to something usable
    history = [x for x in X]
    day = 1
    result = []
    for yhat in forecast:
        inverted = inverse_difference(history, yhat, days_in_year)
        #print('Day %d: %f' % (day, inverted))
        history.append(inverted)
        result.append(inverted)
        day += 1

    df = pd.DataFrame(result)
    df = df.rename(columns={0:'PREDICT'})
    df['DIA'] = df.index
    return df